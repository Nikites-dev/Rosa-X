@using GinSki.Services
@using GinSki.Models
@using System.Xml
@using GinSki.MongoDB
@inject InvertoryType InvertoryType 

@inject NavigationManager NavigationManager 
@inject ISnackbar Snackbar

<div class="field">
    <div class="cardInvent">

        <div class="content1">
            <p>Добавлене инвентаря</p>
        </div>

        <div class="content2">
            <div class="row">
                <p>Тип инвентаря</p>
                @if (listInventory != null || listInventory.Count != 0)
                {
                    <select class="selectInterest" @bind="@selectInventory">
                        <option value="">Выбрать</option>
                        @foreach (var interest in listInventory)
                        {
                            <option value="@interest">@interest</option>
                        }
                    </select>
                }
            </div>

            <div class="row">
                <p>Название</p>
                <input @bind-value="@name"/>
            </div>
            
            <div class="row">
                <p>Рост/Размер</p>
                <input @bind-value="@heightSize"/>
            </div>
            

            <div class="row">
                <p>Цена за час</p>
                <input @bind-value="@priceOfHour"/>
            </div>
            
            <div class="row">
                <button @onclick="@CreateInv">Добавить</button>
            </div>
        </div>
           <hr class="rounded">
    </div>
 
</div>

@code {
    private List<String> listInventory;
    private String selectInventory = "";
    private String name = "";
    private int heightSize = 0;
    private int priceOfHour = 0;

    
    [Parameter]
    public Action<String> onDataChanged { get; set; }
    
    protected override void OnInitialized()
    {
        listInventory = InvertoryType.listTypesInverory.ToList();
        ChangePosition("Bottom-Center", Defaults.Classes.Position.BottomCenter);
    }

    void CreateInv()
    {
        if (selectInventory == "" || name == "" || heightSize == 0 || priceOfHour == 0)
        {
            return;
        }
        
        Inventory inventory = new Inventory();
        inventory.Name = name;
        inventory.HeightSize = heightSize;
        inventory.PriceOfHour = priceOfHour;
        inventory.IdTypeInverory = InvertoryType.listTypesInverory.FindIndex(a => a == selectInventory);
        
        InventoryDbConnection.AddToDatabase(inventory);   
        
        onDataChanged?.Invoke(name);
        Snackbar.Add("Sign up success!", Severity.Success, config => { config.ShowCloseIcon = false; });
    }
    
    void ChangePosition(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
      
    }
}