@using GinSki.Components
@using GinSki.Models
@using GinSki.MongoDB
@using GinSki.Services
@inject HeaderMenu HeaderMenu
@inject AddInventory AddInventory
@inject InvertoryType InvertoryType
@inject ISnackbar Snackbar

<div class="fon">
    <div class="cardInvent">
        <div hidden="@IsAddUserInventory">
            <AddInventory onDataChanged="@OnDataChanged"></AddInventory>
        </div>

        <div class="content1">
            
            <p>Инвентарь</p>

            @if (listInventoryType != null || listInventoryType.Count != 0)
            {
                <select class="selectInterest" @onchange="@SortChanged">
                    <option value="">Все</option>
                    @foreach (var interest in listInventoryType)
                    {
                        <option value="@interest">@interest</option>
                    }
                </select>
            }

                <button class="btnExit" hidden="@(@IsAddUserInventory ? false : true)" @onclick="(() => OnCloseChanged())">╳</button>
        </div>

        <div class="content2">
            <div class="tableHeaderInvent">
                <p style="width: 200px">Тип инвентаря</p>
                <p style="width: 200px">Название</p>
                <p style="width: 200px">Размер</p>
                <p style="width: 200px">цена за час</p>  
            </div>

            <div class="tableContent">
                @if (listInventory != null)
                {
                    @foreach (var item in listInventory)
                    {
                        <button class="btnRow" disabled="@(@IsAddUserInventory?false:true)" @onclick="() => SelectInventory(item)">
                            <p style="width: 200px">@InvertoryType.listTypesInverory[item.IdTypeInverory]</p>
                            <p style="width: 200px">@item.Name</p>
                            <p style="width: 200px">@item.HeightSize</p>
                            <p style="width: 200px">@item.PriceOfHour.ToString() p.</p>
                        </button>
                        <hr class="rounded">
                    }
                }
            </div>
        </div>
        @if (IsAddUserInventory)
        {
            <hr class="rounded2">
            <div class="content4">
                <div class="headerAddInv">
                    <p>Выбранные снаряжения</p>
                    <p>@CrntClient.LName</p>
                    <p>@CrntClient.FName</p>
                </div>
               
                <div class="content3">
                                     
                    @if (listSelectInv != null)
                    {
                        @foreach (var item in listSelectInv)
                        {
                            <button class="btnRow2" disabled="@(@IsAddUserInventory ? false : true)" @onclick="() => UnselectInventory(item)">
                                <p style="width: 200px">@InvertoryType.listTypesInverory[item.IdTypeInverory]</p>
                                <p style="width: 200px">@item.Name</p>
                                <p style="width: 200px">@item.HeightSize</p>
                                <p style="width: 200px">@item.PriceOfHour.ToString() p.</p>
                            </button>
                            <hr class="rounded">
                        }
                    }
                </div>
                
                <div class="contentBottom">
                    <div class="contentBottom">
                        <div class="bottomRow">
                            <p>Начало аренды</p>
                            <input @bind-value="@startArend"/>
                        </div>
    
                        <div class="bottomRow">
                            <p>Окончание аренды</p>
                            <input @bind-value="@endArend"/>
                        </div>
                        
                    </div>
                    

                    <div>
                        <button class="btnArend" @onclick="@AddUserInventory">Арендовать</button>
                    </div>
                </div>
            </div>
        }
        
    </div>
</div>



@code {
    String selectInventory = "";
    bool isShowAddInv = false;
    
    List<Inventory> listSelectInv = new List<Inventory>();
    List<Inventory> listInventory = new List<Inventory>();
    List<String> listInventoryType = new List<String>();

    DateTime startArend = DateTime.Now;
    DateTime endArend = DateTime.Now.AddHours(1);
    
    private bool isShow { get; set; }
    
    [Parameter]
    public Client CrntClient { get; set; }

    [Parameter]
    public bool IsAddUserInventory { get; set; }

    protected override void OnInitialized()
    {
        listInventoryType = InvertoryType.listTypesInverory.ToList();
        listInventory = InventoryDbConnection.GetListInventory();
    }
    
    private void OnDataChanged(String text)
    {
        listInventory = InventoryDbConnection.GetListInventory();
        StateHasChanged();
    }

    void SortChanged(ChangeEventArgs e)
    {
        selectInventory = e.Value.ToString();
        if (selectInventory == "")
        {
            listInventory = InventoryDbConnection.GetListInventory();
        }
        else
        {
            listInventory = InventoryDbConnection.GetListInventory();
            listInventory = listInventory.Where(x => x.IdTypeInverory == InvertoryType.listTypesInverory.FindIndex(x => x == selectInventory)).ToList();
        }
    }

    void SelectInventory(Inventory inventory)
    {
        listInventory.Remove(inventory);
        listSelectInv.Add(inventory);
    }

    void UnselectInventory(Inventory inventory)
    {
        listSelectInv.Remove(inventory);
        listInventory.Add(inventory);
        StateHasChanged();
    }

    void AddUserInventory()
    {
        if (listSelectInv == null)
        {
            return;
        }

        foreach (var item in listSelectInv)
        {
            InventoryDbConnection.DeleteInventory(item);
            
            item.StartArend = startArend.AddHours(3);
            item.EndArend = endArend.AddHours(3);
            CrntClient.listInventory.Add(item);
            
        }
        UserDbConnection.UpdateClient(CrntClient);
        Snackbar.Add("Sign up success!", Severity.Success, config => { config.ShowCloseIcon = false; });
    }
    
    private void OnCloseChanged()
    {
        isShow = false;
        onDataChanged?.Invoke(isShow);
    }
    
    [Parameter]
    public Action<bool> onDataChanged { get; set; }
}